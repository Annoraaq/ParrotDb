<?php
namespace ParrotDb\Persistence\Feather;

use ParrotDb\Core\PSessionFactory;

require_once dirname(__FILE__) . "/../../../testclasses/Author.php";

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-11 at 10:14:36.
 */
class FeatherParserTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var FeatherParser
     */
    protected $parser;
    
    protected $pm;
    
    protected $session;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {

        $path = dirname(__FILE__) . "/pdb/Feather/";
        
        $this->session = PSessionFactory::createSession(dirname(__FILE__) . "/pdb/Feather", \ParrotDb\Core\PSession::DB_FEATHER);
        $this->pm = $this->session->createPersistenceManager();
        
        if (file_exists($path . "Feather.pfo")) {
            unlink($path . "Feather.pfo");
        }
        
        if (file_exists($path . "Author.pdb")) {
            unlink($path . "Author.pdb");
        }
        
        $this->parser = new FeatherParser($path . "Author.pdb", $this->session->getDatabase()->getConfig());
        
    }
    
     private function createTestAuthor() {
        $author = new \Author("Mr Satan", 53);
        
//        $author->allPublications = array();
//        
//        $author->allPublications[] = new \Publication("Lord Of The Rings");
//        $author->allPublications[] = new \Publication("Star Wars");
//        
//        $author->orderedPublications[17] = new \Publication("Lord Of The Rings");
//        $author->orderedPublications[21] = new \Publication("Star Wars");
//        $author->nestedPublications = array();
        
        $author->size = 175;
        
        return $author;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        PSessionFactory::closeSession(dirname(__FILE__) . "/pdb/Feather");
        $path = dirname(__FILE__) . "/pdb/Feather/";
        if (file_exists($path . "Feather.pfo")) {
            unlink($path . "Feather.pfo");
        }

        if (file_exists($path . "Author.pdb")) {
            unlink($path . "Author.pdb");
        }
    }

    /**
     * @covers ParrotDb\Persistence\Feather\FeatherParser::isObjectStoredIn
     * @todo   Implement testIsObjectStoredIn().
     */
    public function testIsObjectStoredIn()
    {
        $author = $this->createTestAuthor();
        $author2 = $this->createTestAuthor();
        
        $this->pm->persist($author);
        $this->pm->persist($author2);
        $this->pm->commit();
        
        $this->assertTrue($this->parser->isObjectStoredIn(
         new \ParrotDb\ObjectModel\PObjectId(0)
        ));
        
        $this->assertTrue($this->parser->isObjectStoredIn(
         new \ParrotDb\ObjectModel\PObjectId(1)
        ));
        
    }
    
    public function testGetClass() {

        $classMapper = new \ParrotDb\Core\ClassMapper();
        $author = $this->createTestAuthor();
        $pClass = $classMapper->createClass($author);
        $this->pm->persist($author);
        $this->pm->commit();
        
        $class = $this->parser->getClass();
        $this->assertEquals($pClass, $class);
    }
    
    /**
     * @covers ParrotDb\Persistence\Feather\FeatherParser::parse
     * @todo   Implement testParse().
     */
    public function testFetch()
    {
        $author = $this->createTestAuthor();
        $author2 = $this->createTestAuthor();
        
        $this->pm->persist($author);
        $this->pm->persist($author2);
        $classMapper = new \ParrotDb\Core\ClassMapper();
        $pClass = $classMapper->createClass($author);
        $objectMapper = new \ParrotDb\Core\ObjectMapper($this->session);
        
//        $obj = null;
//        $obj2 = null;
//        foreach ($this->pm->getObjectMapper()->getOIdToPhpId() as $pObj) {
//            
//            echo "\n ID:" . $this->pm->getObjectMapper()->getOIdToPhpId() . "\n";
//            if ($pObj->getObjectId()->getId() == 0) {
//                $obj = $pObj;
//            }
//            
//            if ($pObj->getObjectId()->getId() == 1) {
//                $obj2= $pObj;
//            }
//        }
//        
        $this->pm->commit();
        
//        $obj->getClass()->resetExtent();
//        $obj2->getClass()->resetExtent();

        $this->assertEquals($author, $objectMapper->fromPObject($this->parser->fetch(new \ParrotDb\ObjectModel\PObjectId(0))));
        $this->assertEquals($author2, $objectMapper->fromPObject($this->parser->fetch(new \ParrotDb\ObjectModel\PObjectId(1))));
    }
    
    public function testSetInvalid() {
        $author = $this->createTestAuthor();
        $author2 = $this->createTestAuthor();
        
        $this->pm->persist($author);
        $this->pm->persist($author2);
        $this->pm->commit();
        
        $this->assertTrue($this->parser->isObjectStoredIn(
         new \ParrotDb\ObjectModel\PObjectId(0)
        ));
        
        $this->assertTrue($this->parser->isObjectStoredIn(
         new \ParrotDb\ObjectModel\PObjectId(1)
        ));
        
        $this->parser->setInvalid(new \ParrotDb\ObjectModel\PObjectId(0));
        
         $this->assertFalse($this->parser->isObjectStoredIn(
         new \ParrotDb\ObjectModel\PObjectId(0)
        ));
         
         $this->assertTrue($this->parser->isObjectStoredIn(
         new \ParrotDb\ObjectModel\PObjectId(1)
        ));
    }

}
