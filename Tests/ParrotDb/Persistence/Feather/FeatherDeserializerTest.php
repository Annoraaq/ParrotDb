<?php

namespace ParrotDb\Persistence\Feather;

use \ParrotDb\Core\PSessionFactory;
use \ParrotDb\Utils\VirtualString;
use \ParrotDb\Persistence\Feather\FeatherClassDeserializer;
use \ParrotDb\Persistence\Feather\FeatherObjectDeserializer;
use \ParrotDb\ObjectModel\PObjectId;


require_once dirname(__FILE__) . "/../../../testclasses/Author.php";
require_once dirname(__FILE__) . "/../../../testclasses/Publication.php";

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-08-27 at 13:49:11.
 */
class FeatherDeserializerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var FeatherSerializer
     */
    protected $object;
    
    protected $pm;
    
    protected $session;


    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->session = PSessionFactory::createSession("Feather", \ParrotDb\Core\PSession::DB_FEATHER);
        $this->pm = $this->session->createPersistenceManager();
        
//        if (file_exists("pdb/Feather/Feather.pdb")) {
//            unlink("pdb/Feather/Feather.pdb");
//        }
//        
//       if (file_exists("pdb/Feather/Author.pdb")) {
//            unlink("pdb/Feather/Author.pdb");
//        }
//        
//        if (file_exists("pdb/Feather/Publication.pdb")) {
//            unlink("pdb/Feather/Publication.pdb");
//        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        PSessionFactory::closeSession("Feather");
    }
    
    private function createTestAuthor() {
        $author = new \Author("Mr Satan", 53);
        
        $author->allPublications = array();
        
        $author->allPublications[] = new \Publication("Lord Of The Rings");
        $author->allPublications[] = new \Publication("Star Wars");
        
        $author->orderedPublications[17] = new \Publication("Lord Of The Rings");
        $author->orderedPublications[21] = new \Publication("Star Wars");
        $author->nestedPublications = array();
        
        $author->size = 175;
        
        return $author;
    }
    
    public function testClassDeserialisation() {
        $input = "c['Author',attr{'name','age','size','publication',"
         . "'allPublications','orderedPublications',"
         . "'nestedPublications','partner','nationality','bla',"
         . "'testAttribute'},sc{'Person','Human'}]";
        
        $classMapper = new \ParrotDb\Core\ClassMapper();
        $author = $this->createTestAuthor();
        $pClass = $classMapper->createClass($author);

        $classDeserializer = new FeatherClassDeserializer();
        $classDeserializer->setInput($input);
        
        $class = $classDeserializer->deserialize();
        $this->assertEquals($pClass, $class);
    }
    
    public function testClassDeserialisationPublication() {
        $input = "c['Publication',attr{'name'},sc{}]";
        
        $classMapper = new \ParrotDb\Core\ClassMapper();
        $publication = new \Publication("Test");
        $pClass = $classMapper->createClass($publication);

        $classDeserializer = new FeatherClassDeserializer();
        $classDeserializer->setInput($input);
        
        $class = $classDeserializer->deserialize();
        $this->assertEquals($pClass, $class);
    }
    
    public function testObjectDeserialisation() {
        $input = "[0,267,'name':8:'Mr Satan','age':2:'53','size':3:'175',"
            . "'publication':0:'','allPublications':19:{'0':1:(1),'1':1:(2)},"
            . "'orderedPublications':21:{'17':1:(3),'21':1:(4)},"
            . "'nestedPublications':0:{},'partner':1:(0),"
            . "'nationality':6:'german','bla':6:'blaBla',"
            . "'testAttribute':4:'test']";
        
        
        $author = $this->createTestAuthor();
        
        $classMapper = new \ParrotDb\Core\ClassMapper();
        $pClass = $classMapper->createClass($author);
        $objectMapper = new \ParrotDb\Core\ObjectMapper($pClass);
        $pObject = new \ParrotDb\ObjectModel\PObject(new PObjectId(0));
        $pObject->setClass($pClass);
        $pObject->addAttribute("name", "Mr Satan");
        $pObject->addAttribute("age", 53);
        $pObject->addAttribute("size", 175);
        $pObject->addAttribute("publication", null);
        $pObject->addAttribute(
            "allPublications",
            array (
                0 => new PObjectId(1),
                1 => new PObjectId(2)
            )
        );
        $pObject->addAttribute(
            "orderedPublications",
            array (
                17 => new PObjectId(3),
                21 => new PObjectId(4)
            )
        );
        $pObject->addAttribute(
            "nestedPublications",
            array ()
        );
        $pObject->addAttribute(
            "partner",
            new PObjectId(0)
        );
        $pObject->addAttribute(
            "nationality",
            "german"
        );
        $pObject->addAttribute(
            "bla",
            "blaBla"
        );
        $pObject->addAttribute(
            "testAttribute",
            "test"
        );

        $objectDeserializer = new FeatherObjectDeserializer($pClass);
        $objectDeserializer->setInput($input);
        
        $obj = $objectDeserializer->deserialize();
        $this->assertEquals($pObject, $obj);
    }
     

    
    

}
