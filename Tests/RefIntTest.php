<?php
namespace ParrotDb\Core;

use \ParrotDb\ObjectModel\PObjectId;
use \ParrotDb\Query\LotB\Parser\Parser;

require_once  dirname(__FILE__) . "/testclasses/Author.php";
require_once  dirname(__FILE__) . "/testclasses/TestRec.php";
require_once  dirname(__FILE__) . "/testclasses/Publication.php";
require_once  dirname(__FILE__) . "/testclasses/StaticStub.php";
require_once  dirname(__FILE__) . "/testclasses/PrivateConstructor.php";


/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-08-18 at 17:07:28.
 */
class RefIntTest  extends \PHPUnit_Framework_TestCase
{
    
     /**
     * @var PPersistanceManager
     */
    protected $pm;
    
    protected $session;
    

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {

        $path = dirname(__FILE__) . "/pdb/Feather/";

        $this->session = PSessionFactory::createSession(dirname(__FILE__) . "/pdb/Feather",
            PSession::DB_FEATHER);
        $this->pm = $this->session->createPersistenceManager();

        
        if (file_exists(dirname(__FILE__) . "/pdb/Feather/Feather.pfo")) {
            unlink(dirname(__FILE__) . "/pdb/Feather/Feather.pfo");
        }

        if (file_exists(dirname(__FILE__) . "/pdb/Feather/refby.ref")) {
            unlink(dirname(__FILE__) . "/pdb/Feather/refby.ref");
        }

        if (file_exists(dirname(__FILE__) . "/pdb/Feather/reflist.ref")) {
            unlink(dirname(__FILE__) . "/pdb/Feather/reflist.ref");
        }

       if (file_exists($path . "Author.pdb")) {
            unlink($path . "Author.pdb");
        }
        
        if (file_exists($path . "Publication.pdb")) {
            unlink($path . "Publication.pdb");
        }
        
        if (file_exists($path . "PrivateConstructor.pdb")) {
            unlink($path . "PrivateConstructor.pdb");
        }

         if (file_exists($path . "StaticStub.pdb")) {
            unlink($path . "StaticStub.pdb");
        }


        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $path = dirname(__FILE__) . "/pdb/Feather/";
       PSessionFactory::closeSession(dirname(__FILE__) . "/pdb/Feather");

        if (file_exists(dirname(__FILE__) . "/pdb/Feather/Feather.pfo")) {
            unlink(dirname(__FILE__) . "/pdb/Feather/Feather.pfo");
        }

        if (file_exists(dirname(__FILE__) . "/pdb/Feather/refby.ref")) {
            unlink(dirname(__FILE__) . "/pdb/Feather/refby.ref");
        }

        if (file_exists(dirname(__FILE__) . "/pdb/Feather/reflist.ref")) {
            unlink(dirname(__FILE__) . "/pdb/Feather/reflist.ref");
        }

        if (file_exists($path . "Author.pdb")) {
            unlink($path . "Author.pdb");
        }

        if (file_exists($path . "Publication.pdb")) {
            unlink($path . "Publication.pdb");
        }

        if (file_exists($path . "PrivateConstructor.pdb")) {
            unlink($path . "PrivateConstructor.pdb");
        }

        if (file_exists($path . "StaticStub.pdb")) {
            unlink($path . "StaticStub.pdb");
        }
    }
    

    
    protected function createTestAuthor() {
        $author = new \Author("Mr Satan", 53);
        $author->publication = new \Publication("Test");
        $author->allPublications = array();
        
        $author->allPublications[] = new \Publication("Lord Of The Rings");
        $author->allPublications[] = new \Publication("Star Wars");
        
        $author->orderedPublications[17] = new \Publication("Lord Of The Rings");
        $author->orderedPublications[21] = new \Publication("Star Wars");
        $author->nestedPublications = array();
        
        $author->size = 175;
        
        return $author;
    }
    
    
    public function testRefBy() {
        $author = $this->createTestAuthor();
         
        $this->pm->persist($author);
         
        $this->pm->commit();
        $refBy = $this->pm->getRefBy(new PObjectId(1));


        $this->assertTrue(isset($refBy[0]));

        $parser = new Parser($this->session->getDatabase());
        $this->pm->delete($parser->parse('get Publication'));
        $this->pm->commit(true);

        $refBy = $this->pm->getRefBy(new PObjectId(1));


        $this->assertFalse(isset($refBy[0]));

    }

    public function testRefList() {
        $author = $this->createTestAuthor();

        $this->pm->persist($author);

        $this->pm->commit();

        $refList = $this->pm->getRefList(new PObjectId(0));

        $this->assertTrue(isset($refList[1]));

        $parser = new Parser($this->session->getDatabase());
        $this->pm->delete($parser->parse('get Author'));
        $this->pm->commit(true);

        $refList = $this->pm->getRefList(new PObjectId(0));


        $this->assertFalse(isset($refList[1]));

    }

    /**
     * @expectedException   \ParrotDb\Persistence\ReferentialIntegrityException
     */
    public function testPrevent() {
        $author = $this->createTestAuthor();

        $this->pm->persist($author);

        $this->pm->commit();

        $parser = new Parser($this->session->getDatabase());
        $this->pm->delete($parser->parse('get Publication'));
        $this->pm->commit();



    }


 
}
