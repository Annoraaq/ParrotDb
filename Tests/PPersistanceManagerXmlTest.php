<?php
namespace ParrotDb\Core;

use \ParrotDb\ObjectModel\PObjectId;
use \ParrotDb\Query\Constraint\PClassConstraint;

require_once("testclasses/Author.php");
require_once("testclasses/TestRec.php");
require_once("testclasses/Publication.php");


/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-08-18 at 17:07:28.
 */
class PPersistanceManagerXmlTest  extends PPersistanceManagerTest
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->session = PSessionFactory::createSession("Testfile.db", PSession::DB_XML);
        $this->pm = $this->session->createPersistenceManager();
        
        if (file_exists("pdb/Author.pdb")) {
            unlink("pdb/Author.pdb");
        }
        
        if (file_exists("pdb/Publications.pdb")) {
            unlink("pdb/Publications.pdb");
        }

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        

       PSessionFactory::closeSession("Testfile.db");
       
               if (file_exists("pdb/Author.pdb")) {
            unlink("pdb/Author.pdb");
        }
        
        if (file_exists("pdb/Publication.pdb")) {
            unlink("pdb/Publication.pdb");
        }
       
        
    }
    
    public function testClassConstraint() {
        $author = $this->createTestAuthor();
        $author2 = $this->createTestAuthor();
        $this->pm->persist($author);
        $this->pm->persist($author2);
        
        $this->pm->commit();

        $constraint = new PClassConstraint("Author");
        
        $result = $this->pm->query($constraint);
        
        $this->assertEquals(2, $result->size());
        


        $this->assertTrue($author->equals($result->first()));
    }
    
    /**
     * @covers ParrotDb\Core\PPersistanceManager::persist
     * @todo   Implement testPersist().
     */
    public function testPersistNestedArray()
    {

        $author = $this->createTestAuthor();
        
        $author->nestedPublications[] = array (
         new \Publication("Star Wars2"),
         new \Publication("Star Wars3"),
         new \Publication("Star Wars4")
        );
        
        $author2 = $this->createTestAuthor();
        
        $author2->nestedPublications[] = array (
         new \Publication("Star Wars2"),
         new \Publication("Star Wars3"),
         new \Publication("Star Wars4"),
        );
        
        $author3 = $this->createTestAuthor();
        
        $author3->nestedPublications[] = array (
         new \Publication("Star Wars2"),
         new \Publication("Star Wars3"),
         new \Publication("Star Wars5"),
        );
        
        $author4 = $this->createTestAuthor();
        
        $author4->nestedPublications[] = array (
         new \Publication("Star Wars2"),
         new \Publication("Star Wars3"),
         new \Publication("Star Wars4"),
         new \Publication("Star Wars5"),
        );
        
        $this->assertTrue($author->equals($author2));
        $this->assertFalse($author->equals($author3));
        $this->assertFalse($author->equals($author4));
        
        $this->pm->persist($author);
        $this->pm->commit();

        $authorReFetched = $this->pm->fetch(new PObjectId(0));
        
                
        echo "AUTHOR2\n";
       var_dump($author2);
        
        echo "AUTHOR\n";
       var_dump($author);
        echo "AUTHOR FETCHED\n";
       var_dump($authorReFetched);

        
        
        $this->assertTrue($author2->equals($authorReFetched));
        $this->assertFalse($author3->equals($authorReFetched));
        $this->assertFalse($author->equals($author4));
        
    }
    
//    /**
//     * @covers ParrotDb\Core\PPersistanceManager::query
//     */
//    public function testAttributeConstraint() {
//        $author = $this->createTestAuthor();
//        
//        $this->pm->persist($author);
//        
//        $this->pm->commit();
//        
//       // $query = PQueryBuilder::get("Author")->attr("name", "Mr Satan");
//        $constraint = new PClassConstraint("Author", new PAttributeConstraint("name", "Mr Satan"));
//        
//        $authorReQueried = $this->pm->query($constraint)->first();
//
//        $this->assertTrue($author->equals($authorReQueried));
//        
//        $author2 = $this->createTestAuthor();
//        $this->pm->persist($author2);
//        $this->pm->commit();
//        
//        $result = $this->pm->query($constraint);
//        
//        $this->assertEquals(2, $result->size());
//
//    }
//    
//    private function createTestAuthor() {
//        $author = new \Author("Mr Satan", 53);
//        $author->publication = new \Publication("Test");
//        $author->allPublications = array();
//        
//        $author->allPublications[] = new \Publication("Lord Of The Rings");
//        $author->allPublications[] = new \Publication("Star Wars");
//        
//        $author->orderedPublications[17] = new \Publication("Lord Of The Rings");
//        $author->orderedPublications[21] = new \Publication("Star Wars");
//        $author->nestedPublications = array();
//        
//        $author->size = 175;
//        
//        return $author;
//    }
//    
//    public function testClassConstraint() {
//        $author = $this->createTestAuthor();
//        $author2 = $this->createTestAuthor();
//        $this->pm->persist($author);
//        $this->pm->persist($author2);
//        
//        $this->pm->commit();
//
//        $constraint = new PClassConstraint("Author");
//        
//        $result = $this->pm->query($constraint);
//        
//        $this->assertEquals(2, $result->size());
//        
//
//
//        $this->assertTrue($author->equals($result->first()));
//    }
 
}
