<?php
namespace ParrotDb\Core;

use \ParrotDb\ObjectModel\PObjectId;
use \ParrotDb\Query\LotB\Parser\Parser;

require_once  dirname(__FILE__) . "/testclasses/Author.php";
require_once  dirname(__FILE__) . "/testclasses/TestRec.php";
require_once  dirname(__FILE__) . "/testclasses/Publication.php";
require_once  dirname(__FILE__) . "/testclasses/StaticStub.php";
require_once  dirname(__FILE__) . "/testclasses/PrivateConstructor.php";


/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-08-18 at 17:07:28.
 */
class GarbageCollectionTest  extends \PHPUnit_Framework_TestCase
{
    
     /**
     * @var PPersistanceManager
     */
    protected $pm;
    
    protected $session;
    

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {

        $path = dirname(__FILE__) . "/pdb/Feather/";

        $this->session = PSessionFactory::createSession(dirname(__FILE__) . "/pdb/Feather",
            PSession::DB_FEATHER);
        $this->pm = $this->session->createPersistenceManager();

        
        if (file_exists(dirname(__FILE__) . "/pdb/Feather/Feather.pfo")) {
            unlink(dirname(__FILE__) . "/pdb/Feather/Feather.pfo");
        }

        if (file_exists(dirname(__FILE__) . "/pdb/Feather/refby.ref")) {
            unlink(dirname(__FILE__) . "/pdb/Feather/refby.ref");
        }

        if (file_exists(dirname(__FILE__) . "/pdb/Feather/reflist.ref")) {
            unlink(dirname(__FILE__) . "/pdb/Feather/reflist.ref");
        }

        if (file_exists($path . "Author.pdb")) {
            unlink($path . "Author.pdb");
        }
        
        if (file_exists($path . "Publication.pdb")) {
            unlink($path . "Publication.pdb");
        }
        
        if (file_exists($path . "PrivateConstructor.pdb")) {
            unlink($path . "PrivateConstructor.pdb");
        }

         if (file_exists($path . "StaticStub.pdb")) {
            unlink($path . "StaticStub.pdb");
        }


        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $path = dirname(__FILE__) . "/pdb/Feather/";
       PSessionFactory::closeSession(dirname(__FILE__) . "/pdb/Feather");

        if (file_exists(dirname(__FILE__) . "/pdb/Feather/Feather.pfo")) {
            unlink(dirname(__FILE__) . "/pdb/Feather/Feather.pfo");
        }

        if (file_exists(dirname(__FILE__) . "/pdb/Feather/refby.ref")) {
            unlink(dirname(__FILE__) . "/pdb/Feather/refby.ref");
        }

        if (file_exists(dirname(__FILE__) . "/pdb/Feather/reflist.ref")) {
            unlink(dirname(__FILE__) . "/pdb/Feather/reflist.ref");
        }

        if (file_exists($path . "Author.pdb")) {
            unlink($path . "Author.pdb");
        }

        if (file_exists($path . "Publication.pdb")) {
            unlink($path . "Publication.pdb");
        }

        if (file_exists($path . "PrivateConstructor.pdb")) {
            unlink($path . "PrivateConstructor.pdb");
        }

        if (file_exists($path . "StaticStub.pdb")) {
            unlink($path . "StaticStub.pdb");
        }
    }
    

    
    protected function createTestAuthor() {
        $author = new \Author("Mr Satan", 53);
        $author->publication = new \Publication("Test");
        $author->allPublications = array();

        $author->allPublications[] = new \Publication("Lord Of The Rings");
        $author->allPublications[] = new \Publication("Star Wars");

        $author->orderedPublications[17] = new \Publication("Lord Of The Rings");
        $author->orderedPublications[21] = new \Publication("Star Wars");
        $author->nestedPublications = array();

        $author->size = 175;

        return $author;
    }

    public function testCountInvalid() {


        $author = $this->createTestAuthor();


        $this->pm->persist($author);


        $this->pm->commit();

        $this->assertEquals(0, $this->session->getDatabase()->getFileManager()->countInvalid('Author'));
        $this->assertEquals(0, $this->session->getDatabase()->getFileManager()->getInvalid('Author'));

        $parser = new Parser($this->session->getDatabase());
        $this->pm->delete($parser->parse('get Author'));
        $this->pm->commit();

        $this->assertEquals(1, $this->session->getDatabase()->getFileManager()->countInvalid('Author'));
        $this->assertEquals(1, $this->session->getDatabase()->getFileManager()->getInvalid('Author'));
    }

    public function testCountInvalidRefBy() {


        $author = $this->createUnrefTestAuthor();
        $author2 = $this->createUnrefTestAuthor();
        $author2->setName("ToDelete");
        $author->partner = $author2;

        $this->pm->persist($author);
        $this->pm->persist($author2);

        $this->pm->commit();

        $this->assertEquals(0, $this->session->getDatabase()->getRefManager()->getRefByInvalid());

        $parser = new Parser($this->session->getDatabase());
        $this->pm->delete($parser->parse('get Author'));
        $this->pm->commit();

        $this->assertEquals(1, $this->session->getDatabase()->getRefManager()->getRefByInvalid());

        $this->pm->cleanRefBy();

        $this->assertEquals(0, $this->session->getDatabase()->getRefManager()->getRefByInvalid());
    }

    public function testCountInvalidRefList() {


        $author = $this->createUnrefTestAuthor();
        $author2 = $this->createUnrefTestAuthor();
        $author2->setName("ToDelete");
        $author->partner = $author2;

        $this->pm->persist($author);
        $this->pm->persist($author2);

        $this->pm->commit();

        $this->assertEquals(0, $this->session->getDatabase()->getRefManager()->getRefListInvalid());

        $parser = new Parser($this->session->getDatabase());
        $this->pm->delete($parser->parse('get Author'));
        $this->pm->commit();

        $this->assertEquals(1, $this->session->getDatabase()->getRefManager()->getRefListInvalid());

        $this->pm->cleanRefList();

        $this->assertEquals(0, $this->session->getDatabase()->getRefManager()->getRefListInvalid());
    }

    protected function createUnrefTestAuthor() {
        $author = new \Author("Mr Satan", 53);

        $author->size = 175;

        return $author;
    }

    public function testRefByGarbageCollectionLimit() {

        $this->session->getDatabase()->getConfig()->setCleanThreshold(9);

        $authors = [];

        for ($i=0; $i<11; $i++) {
            $authors[$i] = $this->createUnrefTestAuthor();
            $authors[$i]->setName($i);
            if ($i > 0) {
                $authors[$i]->partner = $authors[$i - 1];
            }
            $this->pm->persist($authors[$i]);
        }

        $this->pm->commit();

        $parser = new Parser($this->session->getDatabase());
        for ($i=10; $i>1; $i--) {
            $this->pm->delete($parser->parse('get Author name = "' . $i . '"'));
        }
        $this->pm->commit();


        $this->assertEquals(9, $this->session->getDatabase()->getRefManager()->getRefByInvalid());

        $this->pm->delete($parser->parse('get Author name = "1"'));
        $this->pm->commit();
        $this->assertEquals(0, $this->session->getDatabase()->getRefManager()->getRefByInvalid());


    }

    public function testRefListGarbageCollectionLimit() {

        $this->session->getDatabase()->getConfig()->setCleanThreshold(9);

        $authors = [];

        for ($i=0; $i<11; $i++) {
            $authors[$i] = $this->createUnrefTestAuthor();
            $authors[$i]->setName($i);
            if ($i > 0) {
                $authors[$i]->partner = $authors[$i - 1];
            }
            $this->pm->persist($authors[$i]);
        }

        $this->pm->commit();

        $parser = new Parser($this->session->getDatabase());
        for ($i=10; $i>1; $i--) {
            $this->pm->delete($parser->parse('get Author name = "' . $i . '"'));
        }
        $this->pm->commit();


        $this->assertEquals(9, $this->session->getDatabase()->getRefManager()->getRefListInvalid());

        $this->pm->delete($parser->parse('get Author name = "1"'));
        $this->pm->commit();
        $this->assertEquals(0, $this->session->getDatabase()->getRefManager()->getRefListInvalid());


    }

    public function testGarbageCollection() {
        $author = $this->createTestAuthor();
        $author2 = $this->createTestAuthor();

        $author2->setName("MrTest");
        $this->pm->persist($author);
        $this->pm->persist($author2);

        $this->pm->commit();

        $parser = new Parser($this->session->getDatabase());
        $this->pm->delete($parser->parse('get Author name = "Mr Satan"'));
        $this->pm->commit();

        $this->assertEquals(1, $this->session->getDatabase()->getFileManager()->countInvalid('Author'));
        $this->assertEquals(1, $this->session->getDatabase()->getFileManager()->getInvalid('Author'));

        $this->pm->clean('Author');

        $this->assertEquals(0, $this->session->getDatabase()->getFileManager()->countInvalid('Author'));
        $this->assertEquals(0, $this->session->getDatabase()->getFileManager()->getInvalid('Author'));

    }

    public function testGarbageCollectionLimit() {

        $this->session->getDatabase()->getConfig()->setCleanThreshold(10);

        $authors = [];

        for ($i=0; $i<11; $i++) {
            $authors[$i] = $this->createTestAuthor();
            $authors[$i]->setName($i);
            $this->pm->persist($authors[$i]);
        }

        $this->pm->commit();

        $parser = new Parser($this->session->getDatabase());
        for ($i=0; $i<10; $i++) {
            $authors[$i] = $this->createTestAuthor();
            $this->pm->delete($parser->parse('get Author name = "' . $i . '"'));
        }
        $this->pm->commit();


        $this->assertEquals(10, $this->session->getDatabase()->getFileManager()->getInvalid('Author'));

        $this->pm->delete($parser->parse('get Author name = "10"'));
        $this->pm->commit();
        $this->assertEquals(0, $this->session->getDatabase()->getFileManager()->getInvalid('Author'));


    }




 
}
